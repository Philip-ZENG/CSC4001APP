{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"btn-group\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  type: \"button\",\n  class: \"btn btn-primary dropdown-toggle\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n};\nconst _hoisted_3 = {\n  class: \"dropdown-menu\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$options.showDropdown ? (_openBlock(), _createElementBlock(\"button\", _hoisted_2, _toDisplayString($props.memberName), 1\n  /* TEXT */\n  )) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"ul\", _hoisted_3, [_createElementVNode(\"li\", null, [_createElementVNode(\"button\", {\n    class: \"dropdown-item\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.deleteMember && $options.deleteMember(...args))\n  }, \"Delete\")]), _createElementVNode(\"li\", null, [_createElementVNode(\"button\", {\n    class: \"dropdown-item\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.modifyManager && $options.modifyManager(...args))\n  }, \" Set As Manager \")])])]);\n}","map":{"version":3,"mappings":";;AACOA,OAAK,EAAC;;;;AAEPC,MAAI,EAAC;AACLD,OAAK,EAAC;AACN,oBAAe;AACf,mBAAc;;;AAKZA,OAAK,EAAC;;;uBAVZE,oBAoBM,KApBN,cAoBM,CAdIC,uCALRD,oBAQS,QART,cAQSE,iBADJC,iBACI,CART,EAOe;AAAA;AAPf,wCAmBI,EAVJC,oBASK,IATL,cASK,CARHA,oBAEK,IAFL,EAEK,IAFL,EAEK,CADHA,oBAAmE,QAAnE,EAAmE;AAA3DN,SAAK,EAAC,eAAqD;AAApCO,WAAK,yCAAEJ,uDAAF;AAA+B,GAAnE,EAAoD,QAApD,CACG,CAFL,CAQG,EALHG,oBAIK,IAJL,EAIK,IAJL,EAIK,CAHHA,oBAES,QAFT,EAES;AAFDN,SAAK,EAAC,eAEL;AAFsBO,WAAK,yCAAEJ,yDAAF;AAE3B,GAFT,EAAqD,kBAArD,CAGG,CAJL,CAKG,CATL,CAUI,CApBN","names":["class","type","_createElementBlock","$options","_toDisplayString","$props","_createElementVNode","onClick"],"sourceRoot":"","sources":["D:\\MySQL\\pickup\\client\\src\\components\\ActivityManagement\\MemberItem.vue"],"sourcesContent":["<template>\n  <div class=\"btn-group\">\n    <button\n      type=\"button\"\n      class=\"btn btn-primary dropdown-toggle\"\n      data-bs-toggle=\"dropdown\"\n      aria-expanded=\"false\"\n      v-if=\"showDropdown\"\n    >\n      {{ memberName }}\n    </button>\n    <ul class=\"dropdown-menu\">\n      <li>\n        <button class=\"dropdown-item\" @click=\"deleteMember\">Delete</button>\n      </li>\n      <li>\n        <button class=\"dropdown-item\" @click=\"modifyManager\">\n          Set As Manager\n        </button>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    memberName: { type: String, required: true },\n    memberId: { type: Number, required: true },\n  },\n  inject: [\n    // Data\n    'userId',\n    'userRole',\n    // Methods\n    'deleteMember',\n    'changeManager',\n  ],\n  computed: {\n    /**\n     * @description\n     * Only show the dropdown(delete/change manager option) when the member iterm is not the user\n     * And when the user is activity manager\n     */\n    showDropdown() {\n      return this.memberId === this.userId && this.userRole === 'MANAGER';\n    },\n  },\n  methods: {\n    /**\n     * @description\n     * Give the users' Manager authority/identity to others\n     */\n    modifyManager() {\n      // eslint-disable-next-line\n      if (confirm('Are you sure that you want to transfer your Manager identity to others?')) {\n        this.changeManager(this.memberId);\n      }\n    },\n    /**\n     * @description\n     * Delete a member from an activity with provided activity_id\n     */\n    deleteMember() {\n      // eslint-disable-next-line\n      if (confirm('Are you sure that you want to delete the member from this activity?')) {\n        this.deleteMember(this.memberId);\n      }\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}