{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"btn-group\"\n};\nconst _hoisted_2 = {\n  type: \"button\",\n  class: \"btn btn-primary dropdown-toggle\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n};\nconst _hoisted_3 = {\n  class: \"dropdown-menu\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"button\", _hoisted_2, _toDisplayString($props.memberName), 1\n  /* TEXT */\n  ), _createElementVNode(\"ul\", _hoisted_3, [_createElementVNode(\"li\", null, [_createElementVNode(\"button\", {\n    class: \"dropdown-item\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.deleteMember && $options.deleteMember(...args))\n  }, \"Delete\")]), _createElementVNode(\"li\", null, [_createElementVNode(\"button\", {\n    class: \"dropdown-item\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.modifyManager && $options.modifyManager(...args))\n  }, \" Set As Manager \")])])]);\n}","map":{"version":3,"mappings":";;AACOA,OAAK,EAAC;;;AAEPC,MAAI,EAAC;AACLD,OAAK,EAAC;AACN,oBAAe;AACf,mBAAc;;;AAIZA,OAAK,EAAC;;;uBATZE,oBAmBM,KAnBN,cAmBM,CAlBJC,oBAOS,QAPT,cAOSC,iBADJC,iBACI,CAPT,EAMe;AAAA;AANf,GAkBI,EAVJF,oBASK,IATL,cASK,CARHA,oBAEK,IAFL,EAEK,IAFL,EAEK,CADHA,oBAAmE,QAAnE,EAAmE;AAA3DH,SAAK,EAAC,eAAqD;AAApCM,WAAK,yCAAEC,uDAAF;AAA+B,GAAnE,EAAoD,QAApD,CACG,CAFL,CAQG,EALHJ,oBAIK,IAJL,EAIK,IAJL,EAIK,CAHHA,oBAES,QAFT,EAES;AAFDH,SAAK,EAAC,eAEL;AAFsBM,WAAK,yCAAEC,yDAAF;AAE3B,GAFT,EAAqD,kBAArD,CAGG,CAJL,CAKG,CATL,CAUI,CAnBN","names":["class","type","_createElementBlock","_createElementVNode","_toDisplayString","$props","onClick","$options"],"sourceRoot":"","sources":["D:\\MySQL\\pickup\\client\\src\\components\\ActivityManagement\\MemberItemForManager.vue"],"sourcesContent":["<template>\r\n  <div class=\"btn-group\">\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn btn-primary dropdown-toggle\"\r\n      data-bs-toggle=\"dropdown\"\r\n      aria-expanded=\"false\"\r\n    >\r\n      {{ memberName }}\r\n    </button>\r\n    <ul class=\"dropdown-menu\">\r\n      <li>\r\n        <button class=\"dropdown-item\" @click=\"deleteMember\">Delete</button>\r\n      </li>\r\n      <li>\r\n        <button class=\"dropdown-item\" @click=\"modifyManager\">\r\n          Set As Manager\r\n        </button>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    memberName: { type: String, required: true },\r\n    memberId: { type: Number, required: true },\r\n  },\r\n  inject: [\r\n    // Data\r\n    'userId',\r\n    'userRole',\r\n    // Methods\r\n    'deleteMember',\r\n    'changeManager',\r\n  ],\r\n  computed: {\r\n    /**\r\n     * @description\r\n     * Only show the dropdown(delete/change manager option) when the member iterm is not the user\r\n     * And when the user is activity manager\r\n     */\r\n    showDropdown() {\r\n      return this.memberId === this.userId && this.userRole === 'MANAGER';\r\n    },\r\n  },\r\n  methods: {\r\n    /**\r\n     * @description\r\n     * Give the users' Manager authority/identity to others\r\n     */\r\n    modifyManager() {\r\n      // eslint-disable-next-line\r\n      if (confirm('Are you sure that you want to transfer your Manager identity to others?')) {\r\n        this.changeManager(this.memberId);\r\n      }\r\n    },\r\n    /**\r\n     * @description\r\n     * Delete a member from an activity with provided activity_id\r\n     */\r\n    deleteMember() {\r\n      // eslint-disable-next-line\r\n      if (confirm('Are you sure that you want to delete the member from this activity?')) {\r\n        this.deleteMember(this.memberId);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}