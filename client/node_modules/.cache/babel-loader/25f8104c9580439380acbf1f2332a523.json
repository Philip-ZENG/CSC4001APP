{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"This is admin console\", -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_user_list = _resolveComponent(\"user-list\");\n\n  return _openBlock(), _createElementBlock(\"section\", null, [_hoisted_1, _createVNode(_component_user_list), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.logout && $options.logout(...args))\n  }, \"Logout\")]);\n}","map":{"version":3,"mappings":";;gCAEIA,oBAA8B,IAA9B,EAA8B,IAA9B,EAAI,uBAAJ,EAAyB;AAAA;AAAzB;;;;;uBADFC,oBAIU,SAJV,EAIU,IAJV,EAIU,CAHRC,UAGQ,EAFRC,aAAuBC,oBAAvB,CAEQ,EADRJ,oBAAuC,QAAvC,EAAuC;AAA9BK,WAAK,yCAAEC,2CAAF;AAAyB,GAAvC,EAAwB,QAAxB,CACQ,CAJV","names":["_createElementVNode","_createElementBlock","_hoisted_1","_createVNode","_component_user_list","onClick","$options"],"sourceRoot":"","sources":["D:\\MySQL\\pickup\\client\\src\\views\\AdminConsoleView.vue"],"sourcesContent":["<template>\n  <section>\n    <h1>This is admin console</h1>\n    <user-list></user-list>\n    <button @click=\"logout\">Logout</button>\n  </section>\n</template>\n\n<script>\nimport UserList from '../components/AdminConsole/UserList.vue';\n\nconst axios = require('axios').default;\n\nconst USER_INFO_URL = 'http://localhost:4000/getActivityList';\n\nexport default {\n  components: {\n    'user-list': UserList,\n  },\n  data() {\n    return {\n      USER_DATA: [],\n    };\n  },\n  provide() {\n    return {\n      userData: this.USER_DATA,\n    };\n  },\n  methods: {\n    logout() {\n      this.$store.dispatch('setIsLogOut');\n      this.$store.dispatch('setIsUser', { isUser: null });\n      this.$router.push('/');\n    },\n    /**\n     * @description\n     * Load all the user data from database, data is stored in \n     */\n    loadUserData() {\n      axios\n        .post(USER_INFO_URL)\n        .then((response) => {\n          const DATA_INDEX = 0;\n          for (let i = 0; i < response.data[DATA_INDEX].length; i+=1) {\n            this.USER_DATA.push(response.data[DATA_INDEX][i]);\n          }\n        });\n    },\n  },\n  mounted() {\n    this.loadUserData();\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}