{"ast":null,"code":"/* eslint-disable */\nimport Datepicker from 'vuejs3-datepicker';\nimport ActivityCard from '../components/Home/ActivityCard.vue';\n\nconst axios = require('axios').default;\n\nexport default {\n  components: {\n    Datepicker,\n    'activity-card': ActivityCard\n  },\n\n  data() {\n    return {\n      userId: '1',\n      searchOrder: '',\n      searchType: 'type',\n      actInformation: [],\n      // store the activity information\n      page: 1,\n      // store the page number\n      userInput: '',\n      // store the user's input for searching\n      userPage: null,\n      // the page number user want to view\n      dateinput: new Date(),\n      minNum: null,\n      maxNum: null,\n      cardSelected: false,\n      chosenIndex: 0\n    };\n  },\n\n  computed: {\n    //calculate the total number of pages\n    totalActivityNum() {\n      return this.actInformation.length;\n    },\n\n    //calculate the current page number\n    numOfPages() {\n      const temp = Math.floor(this.totalActivityNum / 12);\n      const res = this.totalActivityNum % 12;\n\n      if (res === 0) {\n        return temp;\n      }\n\n      return temp + 1;\n    },\n\n    //return the activity on a certain page\n    shownActivity() {\n      const res = [];\n\n      if (this.page * 12 > this.actInformation.length) {\n        for (let i = (this.page - 1) * 12; i < this.actInformation.length; i += 1) {\n          res.push(this.actInformation[i]);\n        }\n      } else {\n        for (let i = 0; i < 12; i += 1) {\n          res.push(this.actInformation[(this.page - 1) * 12 + i]);\n        }\n      }\n\n      return res;\n    }\n\n  },\n  watch: {\n    //the page number changes when user change the page number by clicking the page change button\n    userPage() {\n      this.page = Number(this.userPage);\n    }\n\n  },\n  methods: {\n    switchTo(path) {\n      this.$router.replace(path);\n    },\n\n    searchActivity() {\n      axios.post('http://localhost:4000/searchActivity', {\n        searchType: this.searchType,\n        userInput: this.userInput\n      }).then(response => {\n        this.actInformation = response.data;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n\n    //ask for activity infromation\n    askInfo() {\n      axios.post('http://localhost:4000/getActivityInfo', {\n        today: this.dateToString(new Date())\n      }).then(response => {\n        this.actInformation = response.data;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n\n    //search for the activity on a certain day\n    searchByDate() {\n      axios.post('http://localhost:4000/searchByDate', {\n        dateinput: this.dateToString(this.dateinput)\n      }).then(response => {\n        this.actInformation = response.data;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n\n    //change the Date() form to string form\n    dateToString(date) {\n      const year = date.getFullYear();\n      let month = (date.getMonth() + 1).toString();\n      let day = date.getDate().toString();\n      let dateTime = '';\n\n      if (month.length === 1) {\n        month = '0' + month;\n      }\n\n      if (day.length === 1) {\n        day = '0' + day;\n      }\n\n      dateTime = year + '-' + month + '-' + day;\n      return dateTime;\n    },\n\n    //show detail information about the card the user are interested in\n    showDetail(index) {\n      this.chosenIndex = index;\n      const act = Object(this.shownActivity[this.chosenIndex]);\n      axios.post('http://localhost:4000/activityMember', {\n        activity_id: act.activity_id\n      }).then(response => {\n        console.log(response.data);\n      }).catch(error => {\n        console.log(err);\n      });\n      this.cardSelected = true;\n    },\n\n    //sort the activity\n    sortActivity() {\n      axios.post('http://localhost:4000/MostRecent').then(response => {\n        this.actInformation = response.data;\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n\n    printOut(a) {\n      console.log(a);\n    }\n\n  },\n\n  mounted() {\n    this.askInfo();\n  }\n\n};","map":{"version":3,"mappings":"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","names":["Datepicker","ActivityCard","axios","require","default","components","data","userId","searchOrder","searchType","actInformation","page","userInput","userPage","dateinput","Date","minNum","maxNum","cardSelected","chosenIndex","computed","totalActivityNum","length","numOfPages","temp","Math","floor","res","shownActivity","i","push","watch","Number","methods","switchTo","path","$router","replace","searchActivity","post","then","response","catch","error","console","log","askInfo","today","dateToString","searchByDate","date","year","getFullYear","month","getMonth","toString","day","getDate","dateTime","showDetail","index","act","Object","activity_id","err","sortActivity","printOut","a","mounted"],"sourceRoot":"","sources":["C:\\Users\\22414\\Desktop\\App\\CSC4001APP\\client\\src\\views\\HomeView.vue"],"sourcesContent":["<template>\n  <div class=\"home\">\n    <table class=\"showTable\" cellspacing=\"0\" cellpadding=\"0\" align=\"center\">\n      <tr height=\"100px\"> <!--first row-->\n        <td id=\"swip\" align=\"center\" colspan=\"3\" border=\"1px\">\n          <span>{{dateinput}}</span>\n        </td>\n        <td id=\"create\" align=\"center\">\n          <button id = \"createNew\" @click=\"switchTo('/activityCreation')\">\n          + Post a new event</button>\n        </td>\n      </tr>\n      <tr height=\"50\"> <!--second row-->\n        <td align=\"center\" width=\"30%\"> <!--search bar-->\n          <select v-model=\"searchType\">\n            <option value=\"type\">type</option>\n            <option value=\"title\">title</option>\n          </select>\n          <input v-model=\"userInput\">\n          <button @click=\"searchActivity\">search</button>\n        </td>\n        <td align=\"center\" width=\"20%\"> <!--order bar-->\n          <div class=\"rightSep\" id=\"order-select\">\n            <select v-model=\"searchOrder\">\n              <option disabled value=\"\">Please select one</option>\n              <option value=\"MostRecent\">Most Recent</option>\n              <option value=\"MostPopular\">Most Popular</option>\n            </select>\n          <button @click=\"sortActivity\">Sort</button>\n          </div>\n        </td>\n        <td align=\"center\" width=\"20%\"> <!--date bar-->\n          <div class=\"rightSep\">\n            <datepicker v-model=\"dateinput\" placeholder=\"Select Date\" iconColor=\"purple\"></datepicker>\n            <button @click=\"searchByDate\">search</button>\n          </div>\n        </td>\n        <td align=\"center\" width=\"30%\"> <!--number bar-->\n          <span>number of members: </span>\n          <input v-model=\"minNum\" style=\"width:25px; height:25px\" onkeyup=\"this.value=this.value.replace(/[^\\d]/g,'')\">\n          <span> - </span>\n          <input v-model=\"maxNum\" style=\"width:25px; height:25px\" onkeyup=\"this.value=this.value.replace(/[^\\d]/g,'')\">\n        </td>\n      </tr>\n    </table>\n\n    <div class=\"actSquare\"> <!-- activity square-->\n      <dl>\n        <dt v-for=\"(act, index) in shownActivity\" :key=\"index\">\n          <activity-card :time=\"dateToString(new Date(act.time))\" :title=\"act.title\" \n            :description=\"act.description\" @click=\"showDetail(index)\">\n          </activity-card>\n        </dt>\n      </dl>\n      <div class=\"pageList\"> <!-- page -->\n        <button @click=\"page -= 1\" :disabled=\"page == 1\">previous</button>\n        <span style=\"margin-left:10px; margin-right:10px\"> {{page}} </span>\n        <button @click=\"page += 1\" :disabled=\"page == numOfPages\">next</button>\n        <span> go to: </span>\n        <select v-model=\"userPage\">\n          <option v-for=\"p in numOfPages\" :key=\"p\" :disabled=\"p == page\">{{p}}</option>\n        </select>\n      </div>\n    </div>\n\n    <div class=\"cardOut\" v-show=\"cardSelected\" @click=\"cardSelected = false\"></div> <!-- detail card-->\n      <div class=\"detailCard\" v-show=\"cardSelected\">\n        <table width=\"90%\" height=\"90%\" padding=\"5%\" cellspacing=\"0\" cellpadding=\"0\" align=\"center\">\n          <tr width=\"100%\" height=\"50px\">\n            <td width=\"25%\"> organizer photo </td>\n            <td width=\"30%\">type: {{Object(shownActivity[chosenIndex]).type}}</td>\n            <td width=\"45%\">title: {{Object(shownActivity[chosenIndex]).title}}</td>\n          </tr>\n           <tr width=\"100%\" height=\"50px\">\n            <td>number:{{Object(shownActivity[chosenIndex]).quota_left}} / {{Object(shownActivity[chosenIndex]).max_capacity}}</td>\n            <td>Loc: {{Object(shownActivity[chosenIndex]).location}}</td>\n            <td>Time: {{dateToString(new Date(Object(shownActivity[chosenIndex]).time))}}</td>\n          </tr>\n          <tr width=\"100%\" height=\"50px\">\n            <td colspan=\"3\">{{Object(shownActivity[chosenIndex]).activity_id}}</td>\n          </tr>\n          <tr>\n            <td colspan=\"3\">{{Object(shownActivity[chosenIndex]).description}}</td>\n          </tr>\n        </table>\n      </div>\n  </div>\n</template>\n\n<script>\n/* eslint-disable */\nimport Datepicker from 'vuejs3-datepicker';\nimport ActivityCard from '../components/Home/ActivityCard.vue';\n\nconst axios = require('axios').default;\n\nexport default {\n  components: {\n    Datepicker,\n    'activity-card': ActivityCard,\n  },\n\n  data() {\n    return {\n      userId: '1',\n      searchOrder: '',\n      searchType: 'type',\n      actInformation: [], // store the activity information\n      page: 1, // store the page number\n      userInput: '', // store the user's input for searching\n      userPage: null, // the page number user want to view\n      dateinput: new Date(),\n      minNum: null,\n      maxNum: null,\n      cardSelected: false,\n      chosenIndex: 0,\n    };\n  },\n\n  computed: {\n    //calculate the total number of pages\n    totalActivityNum() {\n      return this.actInformation.length;\n    },\n    //calculate the current page number\n    numOfPages() {\n      const temp = Math.floor(this.totalActivityNum / 12);\n      const res = this.totalActivityNum % 12;\n      if (res === 0) {\n        return temp;\n      }\n      return temp + 1;\n    },\n    //return the activity on a certain page\n    shownActivity() {\n      const res = [];\n      if (this.page * 12 > this.actInformation.length) {\n        for (let i = (this.page - 1) * 12; i < this.actInformation.length; i += 1) {\n          res.push(this.actInformation[i]);\n        }\n      } else {\n        for (let i = 0; i < 12; i += 1) {\n          res.push(this.actInformation[(this.page - 1) * 12 + i]);\n        }\n      }\n      return res;\n    },\n  },\n\n  watch: {\n    //the page number changes when user change the page number by clicking the page change button\n    userPage() {\n      this.page = Number(this.userPage);\n    },\n  },\n\n  methods: {\n    switchTo(path) {\n      this.$router.replace(path);\n    },\n\n    searchActivity() {\n      axios.post(\n        'http://localhost:4000/searchActivity',\n        { searchType: this.searchType, userInput: this.userInput },\n      )\n        .then((response) => {\n          this.actInformation = response.data;\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    },\n\n    //ask for activity infromation\n    askInfo() {\n      axios.post(\n        'http://localhost:4000/getActivityInfo',\n        { today: this.dateToString(new Date())},\n        )\n        .then((response) => {\n          this.actInformation = response.data;\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    },\n\n    //search for the activity on a certain day\n    searchByDate() {\n      axios.post(\n        'http://localhost:4000/searchByDate',\n        { dateinput: this.dateToString(this.dateinput) },\n      )\n        .then((response) => {\n          this.actInformation = response.data;\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    },\n\n    //change the Date() form to string form\n    dateToString(date) {\n      const year = date.getFullYear();\n      let month = (date.getMonth() + 1).toString();\n      let day = (date.getDate()).toString();\n      let dateTime = '';\n      if (month.length === 1) {\n        month = '0' + month;\n      }\n      if (day.length === 1) {\n        day = '0' + day;\n      }\n      dateTime = year + '-' + month + '-' + day;\n      return dateTime;\n    },\n\n    //show detail information about the card the user are interested in\n    showDetail(index) {\n      this.chosenIndex = index;\n      const act = Object(this.shownActivity[this.chosenIndex]);\n      axios.post(\n        'http://localhost:4000/activityMember',\n        { activity_id: act.activity_id}\n      ).then((response) => {\n        console.log(response.data);\n      }).catch((error) => {\n        console.log(err);\n      });\n      this.cardSelected = true;\n    },\n     //sort the activity\n    sortActivity() {\n      axios.post('http://localhost:4000/MostRecent')\n        .then((response) => {\n          this.actInformation = response.data;\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    },\n\n    printOut(a) {\n      console.log(a);\n    },\n  },\n\n  mounted() {\n    this.askInfo();\n  },\n\n};\n</script>\n\n<style>\n#swip {\n  border-style: solid; border-width: 0px 1px 1px 0px;\n}\n\n#create {\n  border-style: solid; border-width: 0px 0px 1px 0px;\n}\n\n#createNew {\n  text-align:center;\n  background-color: white;\n  border-radius: 10px;\n  height:45px; width: 200px;\n}\n\n.rightSep{\n  width: 350px;\n  margin: 5px;\n  border-style: solid; border-width: 0px 1px 0px 0px;\n}\n\n.showTable{\n  width: 100%;\n  border-style: solid; border-width: 1px 0px 1px 0px; border-color: black;\n}\n\n.actSquare{\n  padding-left: 6%; padding-right: 6%; padding-top: 1%;\n  display: flex;\n}\n\n.actSquare activity-card{\n  flex: 1;\n}\n\n.pageList{\n  position: fixed; bottom: 0%;\n  width: 100%; height: 5%;\n  background-color: white;\n}\n\n.cardOut{\n  position:fixed; bottom:0%; top:0%; left:0%; right:0%;\n  height:100%; width:100;\n  background:rgba(0,0,0,0.2)\n}\n\n.detailCard{\n  position:fixed; top:25%; bottom:25%; left:25%; right:25%;\n  width:50%; height:50%;\n  background-color: whitesmoke;\n  border: solid; border-radius: 10px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}