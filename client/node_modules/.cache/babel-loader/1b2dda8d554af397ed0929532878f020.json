{"ast":null,"code":"import { createStore } from 'vuex';\nconst store = createStore({\n  // state is equivalent to data\n  state() {\n    return {\n      user_id: null,\n      user_token: null,\n      isLogIn: false,\n      user_identity: null\n    };\n  },\n\n  // getter is equivalent to computed property\n  getters: {\n    getUserId(state) {\n      return state.user_id;\n    },\n\n    getUserToken(state) {\n      return state.user_token;\n    },\n\n    getIsLogIn(state) {\n      return state.isLogIn;\n    },\n\n    getUserIdentity(state) {\n      return state.user_identity;\n    }\n\n  },\n  // mutation is equivalent to method\n  mutations: {\n    setUserId(state, data) {\n      state.user_id = data.user_id;\n    },\n\n    setUserToken(state, data) {\n      state.user_token = data.user_token;\n    },\n\n    setIsLogIn(state) {\n      state.isLogIn = true;\n    },\n\n    setUserIdentity(state, data) {\n      state.user_identity = data.user_identity;\n    }\n\n  },\n\n  /**\n   * action is similar to events, we should not call mutations directly from our vue app\n   * we should always call the action that wraps the mutation to execute them\n   */\n  actions: {\n    setUserId(context, data) {\n      context.commit('setUserId', data);\n    },\n\n    setUserToken(context, data) {\n      context.commit('setUserToken', data);\n    },\n\n    setIsLogIn(context) {\n      context.commit('setIsLogIn');\n    },\n\n    setUserIdentity(context, data) {\n      context.commit('setUserIdentity', data);\n    }\n\n  }\n});\nexport default store;","map":{"version":3,"sources":["D:/MySQL/pickup/client/src/store/index.js"],"names":["createStore","store","state","user_id","user_token","isLogIn","user_identity","getters","getUserId","getUserToken","getIsLogIn","getUserIdentity","mutations","setUserId","data","setUserToken","setIsLogIn","setUserIdentity","actions","context","commit"],"mappings":"AAAA,SAASA,WAAT,QAA4B,MAA5B;AAEA,MAAMC,KAAK,GAAGD,WAAW,CAAC;AACxB;AACAE,EAAAA,KAAK,GAAG;AACN,WAAO;AACLC,MAAAA,OAAO,EAAE,IADJ;AAELC,MAAAA,UAAU,EAAE,IAFP;AAGLC,MAAAA,OAAO,EAAE,KAHJ;AAILC,MAAAA,aAAa,EAAE;AAJV,KAAP;AAMD,GATuB;;AAUxB;AACAC,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,CAACN,KAAD,EAAQ;AACf,aAAOA,KAAK,CAACC,OAAb;AACD,KAHM;;AAIPM,IAAAA,YAAY,CAACP,KAAD,EAAQ;AAClB,aAAOA,KAAK,CAACE,UAAb;AACD,KANM;;AAOPM,IAAAA,UAAU,CAACR,KAAD,EAAQ;AAChB,aAAOA,KAAK,CAACG,OAAb;AACD,KATM;;AAUPM,IAAAA,eAAe,CAACT,KAAD,EAAQ;AACrB,aAAOA,KAAK,CAACI,aAAb;AACD;;AAZM,GAXe;AAyBxB;AACAM,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,CAACX,KAAD,EAAQY,IAAR,EAAc;AACrBZ,MAAAA,KAAK,CAACC,OAAN,GAAgBW,IAAI,CAACX,OAArB;AACD,KAHQ;;AAITY,IAAAA,YAAY,CAACb,KAAD,EAAQY,IAAR,EAAc;AACxBZ,MAAAA,KAAK,CAACE,UAAN,GAAmBU,IAAI,CAACV,UAAxB;AACD,KANQ;;AAOTY,IAAAA,UAAU,CAACd,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACG,OAAN,GAAgB,IAAhB;AACD,KATQ;;AAUTY,IAAAA,eAAe,CAACf,KAAD,EAAQY,IAAR,EAAc;AAC3BZ,MAAAA,KAAK,CAACI,aAAN,GAAsBQ,IAAI,CAACR,aAA3B;AACD;;AAZQ,GA1Ba;;AAwCxB;AACF;AACA;AACA;AACEY,EAAAA,OAAO,EAAE;AACPL,IAAAA,SAAS,CAACM,OAAD,EAAUL,IAAV,EAAgB;AACvBK,MAAAA,OAAO,CAACC,MAAR,CAAe,WAAf,EAA4BN,IAA5B;AACD,KAHM;;AAIPC,IAAAA,YAAY,CAACI,OAAD,EAAUL,IAAV,EAAgB;AAC1BK,MAAAA,OAAO,CAACC,MAAR,CAAe,cAAf,EAA+BN,IAA/B;AACD,KANM;;AAOPE,IAAAA,UAAU,CAACG,OAAD,EAAU;AAClBA,MAAAA,OAAO,CAACC,MAAR,CAAe,YAAf;AACD,KATM;;AAUPH,IAAAA,eAAe,CAACE,OAAD,EAAUL,IAAV,EAAgB;AAC7BK,MAAAA,OAAO,CAACC,MAAR,CAAe,iBAAf,EAAkCN,IAAlC;AACD;;AAZM;AA5Ce,CAAD,CAAzB;AA4DA,eAAeb,KAAf","sourcesContent":["import { createStore } from 'vuex';\n\nconst store = createStore({\n  // state is equivalent to data\n  state() {\n    return {\n      user_id: null,\n      user_token: null,\n      isLogIn: false,\n      user_identity: null,\n    };\n  },\n  // getter is equivalent to computed property\n  getters: {\n    getUserId(state) {\n      return state.user_id;\n    },\n    getUserToken(state) {\n      return state.user_token;\n    },\n    getIsLogIn(state) {\n      return state.isLogIn;\n    },\n    getUserIdentity(state) {\n      return state.user_identity;\n    },\n  },\n  // mutation is equivalent to method\n  mutations: {\n    setUserId(state, data) {\n      state.user_id = data.user_id;\n    },\n    setUserToken(state, data) {\n      state.user_token = data.user_token;\n    },\n    setIsLogIn(state) {\n      state.isLogIn = true;\n    },\n    setUserIdentity(state, data) {\n      state.user_identity = data.user_identity;\n    },\n  },\n  /**\n   * action is similar to events, we should not call mutations directly from our vue app\n   * we should always call the action that wraps the mutation to execute them\n   */\n  actions: {\n    setUserId(context, data) {\n      context.commit('setUserId', data);\n    },\n    setUserToken(context, data) {\n      context.commit('setUserToken', data);\n    },\n    setIsLogIn(context) {\n      context.commit('setIsLogIn');\n    },\n    setUserIdentity(context, data) {\n      context.commit('setUserIdentity', data);\n    }\n  },\n});\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}