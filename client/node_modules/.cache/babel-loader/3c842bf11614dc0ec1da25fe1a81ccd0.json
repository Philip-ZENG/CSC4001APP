{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"home\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_management_console = _resolveComponent(\"management-console\");\n\n  return _openBlock(), _createElementBlock(\"section\", null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"h2\", null, \"The activity id is \" + _toDisplayString($data.activity_id), 1\n  /* TEXT */\n  ), _createElementVNode(\"h2\", null, \"The user id is \" + _toDisplayString($data.user_id), 1\n  /* TEXT */\n  )]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.ACTIVITY_INFO, activity => {\n    return _openBlock(), _createBlock(_component_management_console, {\n      key: activity.activity_id,\n      title: activity.title,\n      time: activity.time,\n      location: activity.location,\n      type: activity.type,\n      max_capacity: activity.max_capacity,\n      quota_left: activity.quota_left,\n      description: activity.description\n    }, null, 8\n    /* PROPS */\n    , [\"title\", \"time\", \"location\", \"type\", \"max_capacity\", \"quota_left\", \"description\"]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]);\n}","map":{"version":3,"mappings":";;AAESA,OAAK,EAAC;;;;;uBADbC,oBAgBU,SAhBV,EAgBU,IAhBV,EAgBU,CAfRC,oBAGM,KAHN,cAGM,CAFJA,oBAA6C,IAA7C,EAA6C,IAA7C,EAAI,wBAAmBC,iBAAGC,iBAAH,CAAvB,EAAqC;AAAA;AAArC,GAEI,EADJF,oBAAqC,IAArC,EAAqC,IAArC,EAAI,oBAAeC,iBAAGC,aAAH,CAAnB,EAA6B;AAAA;AAA7B,GACI,CAHN,CAeQ,qBAXRH,oBAUsBI,SAVtB,EAUsB,IAVtB,EAUsBC,YATDF,mBASC,EATbG,QAAyB,IAAjB;yBADjBC,aAUsBC,6BAVtB,EAUsB;AARnBC,SAAG,EAAEH,QAAQ,CAACI,WAQK;AAPnBC,WAAK,EAAEL,QAAQ,CAACK,KAOG;AANnBC,UAAI,EAAEN,QAAQ,CAACM,IAMI;AALnBC,cAAQ,EAAEP,QAAQ,CAACO,QAKA;AAJnBC,UAAI,EAAER,QAAQ,CAACQ,IAII;AAHnBC,kBAAY,EAAET,QAAQ,CAACS,YAGJ;AAFnBC,gBAAU,EAAEV,QAAQ,CAACU,UAEF;AADnBC,iBAAW,EAAEX,QAAQ,CAACW;AACH,KAVtB;;AAAA;GAUsB,CAVtB;;AAAA,GAWQ,EAhBV","names":["class","_createElementBlock","_createElementVNode","_toDisplayString","$data","_Fragment","_renderList","activity","_createBlock","_component_management_console","key","activity_id","title","time","location","type","max_capacity","quota_left","description"],"sourceRoot":"","sources":["D:\\MySQL\\pickup\\client\\src\\views\\ActivityManagementView.vue"],"sourcesContent":["<template>\n  <section>\n    <div class=\"home\">\n      <h2>The activity id is {{ activity_id }}</h2>\n      <h2>The user id is {{ user_id }}</h2>\n    </div>\n    <management-console\n      v-for=\"activity in ACTIVITY_INFO\"\n      :key=\"activity.activity_id\"\n      :title=\"activity.title\"\n      :time=\"activity.time\"\n      :location=\"activity.location\"\n      :type=\"activity.type\"\n      :max_capacity=\"activity.max_capacity\"\n      :quota_left=\"activity.quota_left\"\n      :description=\"activity.description\"\n    ></management-console>\n  </section>\n</template>\n\n<script>\nimport managementConsole from '../components/ActivityManagement/ManagementConsole.vue';\n\nconst axios = require('axios').default;\n\nconst ACTIVITY_INFO_URL = 'http://localhost:4000/getActivityInfo';\nconst USER_ROLE = 'http://localhost:4000/getUserRole';\nconst DELETE_MEMBER = 'http://localhost:4000/quitActivity';\nconst CHANGE_MANAGER = 'http://localhost:4000/changeManager';\nconst TERMINATE_ACTIVITY = 'http://localhost:4000/terminateActivity';\nconst MEMBER_INFO = 'http://localhost:4000/getMemberInfo';\n\nexport default {\n  components: {\n    'management-console': managementConsole,\n  },\n  data() {\n    return {\n      activity_id: null,\n      // Use array here because if set to null, the data cannot be pass through\n      user_id: [],\n      user_role: [],\n      ACTIVITY_INFO: [],\n      MEMBER_ID_LIST: [], // The list of user_ids who take part in the activity\n      MEMBER_INFO: [], // Information of all the members\n    };\n  },\n  provide() {\n    return {\n      // Data\n      userId: this.user_id,\n      userRole: this.user_role,\n      activityInfo: this.ACTIVITY_INFO,\n      memberInfo: this.MEMBER_INFO,\n      // Methods\n      deleteMember: this.deleteMember,\n      changeManager: this.changeManager,\n      terminateActivity: this.terminateActivity,\n    };\n  },\n  methods: {\n    /**\n     * @description\n     * Return activity info of a specific activity with the provided activity_id\n     */\n    getActivityInfo() {\n      const that = this;\n      axios\n        .post(ACTIVITY_INFO_URL, { activity_id: this.activity_id })\n        .then((response) => {\n          that.ACTIVITY_INFO.push(response.data);\n        });\n    },\n    /**\n     * @description\n     * Return the role of a user with the provided activity_id and user_id\n     */\n    getUserRole() {\n      axios\n        .post(USER_ROLE, { activity_id: this.activity_id, user_id: this.user_id })\n        .then((response) => {\n          this.user_role.push(response.data.role);\n        });\n    },\n    /**\n     * @description\n     * Quit from the activity with provided activity_id and user_id\n     * If the user is a manager, we need to make sure there is at least another manager before\n     * he can execute this action\n     */\n    deleteMember(userId) {\n      axios.post(DELETE_MEMBER, { activity_id: this.activity_id, user_id: userId });\n    },\n    /**\n     * @description\n     * Transfer the authority of activity manager to other member with provided new_manager_id\n     */\n    changeManager(newManagerId) {\n      axios.post(CHANGE_MANAGER, {\n        activity_id: this.activity_id,\n        new_manager_id: newManagerId,\n        old_manager_id: this.userId,\n      });\n    },\n    /**\n     * @description\n     * Terminate the whole activity, can only be triggered by activity manager\n     */\n    terminateActivity() {\n      axios.post(TERMINATE_ACTIVITY, { activity_id: this.activity_id });\n    },\n    /**\n     * @description\n     * Get all the member info\n     */\n    getMemberInfo() {\n      axios\n        .post(MEMBER_INFO, { activity_id: this.activity_id })\n        .then((response) => {\n          console.log(response.data);\n          this.MEMBER_INFO.push(response.data);\n        });\n    },\n  },\n  mounted() {\n    this.getActivityInfo();\n    this.getUserRole();\n    this.getMemberInfo();\n  },\n  created() {\n    // get the route parameter 'id' from router\n    this.activity_id = this.$route.params.activity_id;\n    this.user_id.push(this.$route.params.user_id);\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}