{"ast":null,"code":"import ManagerConsole from '../components/ActivityManagement/ManagerConsole.vue';\nimport MemberConsole from '../components/ActivityManagement/MemberConsole.vue';\n\nconst axios = require('axios').default;\n\nconst ACTIVITY_INFO_URL = 'http://localhost:4000/getActivityInfo';\nconst USER_ROLE = 'http://localhost:4000/getUserRole';\nconst DELETE_MEMBER = 'http://localhost:4000/quitActivity';\nexport default {\n  components: {\n    'manager-console': ManagerConsole,\n    'member-console': MemberConsole\n  },\n\n  data() {\n    return {\n      activity_id: null,\n      user_id: null,\n      ACTIVITY_INFO: [],\n      user_role: ''\n    };\n  },\n\n  provide() {\n    return {\n      activity_info: this.ACTIVITY_INFO,\n      deleteMember: this.deleteMember\n    };\n  },\n\n  created() {\n    // get the route parameter 'id' from router\n    this.activity_id = this.$route.params.activity_id;\n    this.user_id = this.$route.params.user_id;\n  },\n\n  methods: {\n    /**\n     * @description\n     * Return activity info of a specific activity with the provided activity_id\n     */\n    getActivityInfo() {\n      axios.post(ACTIVITY_INFO_URL, {\n        activity_id: this.activity_id\n      }).then(response => {\n        this.ACTIVITY_INFO.push(response.data);\n      });\n    },\n\n    /**\n     * @description\n     * Return the role of a user with the provided activity_id and user_id\n     */\n    getUserRole() {\n      axios.post(USER_ROLE, {\n        activity_id: this.activity_id,\n        user_id: this.user_id\n      }).then(response => {\n        this.user_role = response.data.role;\n      });\n    },\n\n    /**\n     * @description\n     * Quit from the activity with provided activity_id and user_id\n     */\n    deleteMember(userId) {\n      axios.post(DELETE_MEMBER, {\n        activity_id: this.activity_id,\n        user_id: userId\n      });\n    }\n\n  },\n  computed: {\n    console() {\n      if (this.user_role === 'MANAGER') {\n        return 'manager-console';\n      }\n\n      return 'member-console';\n    }\n\n  },\n\n  mounted() {\n    this.getActivityInfo();\n    this.getUserRole();\n  }\n\n};","map":{"version":3,"mappings":"AAeA,OAAOA,cAAP,MAA2B,qDAA3B;AACA,OAAOC,aAAP,MAA0B,oDAA1B;;AAEA,MAAMC,KAAI,GAAIC,OAAO,CAAC,OAAD,CAAP,CAAiBC,OAA/B;;AAEA,MAAMC,iBAAgB,GAAI,uCAA1B;AACA,MAAMC,SAAQ,GAAI,mCAAlB;AACA,MAAMC,aAAY,GAAI,oCAAtB;AAEA,eAAe;AACbC,YAAU,EAAE;AACV,uBAAmBR,cADT;AAEV,sBAAkBC;AAFR,GADC;;AAKbQ,MAAI,GAAG;AACL,WAAO;AACLC,iBAAW,EAAE,IADR;AAELC,aAAO,EAAE,IAFJ;AAGLC,mBAAa,EAAE,EAHV;AAILC,eAAS,EAAE;AAJN,KAAP;AAMD,GAZY;;AAabC,SAAO,GAAG;AACR,WAAO;AACLC,mBAAa,EAAE,KAAKH,aADf;AAELI,kBAAY,EAAE,KAAKA;AAFd,KAAP;AAKD,GAnBY;;AAoBbC,SAAO,GAAG;AACR;AACA,SAAKP,WAAL,GAAmB,KAAKQ,MAAL,CAAYC,MAAZ,CAAmBT,WAAtC;AACA,SAAKC,OAAL,GAAe,KAAKO,MAAL,CAAYC,MAAZ,CAAmBR,OAAlC;AACD,GAxBY;;AAyBbS,SAAO,EAAE;AACP;;;;AAIAC,mBAAe,GAAG;AAChBnB,WAAK,CAACoB,IAAN,CAAWjB,iBAAX,EAA8B;AAAEK,mBAAW,EAAE,KAAKA;AAApB,OAA9B,EACGa,IADH,CACSC,QAAD,IAAc;AAClB,aAAKZ,aAAL,CAAmBa,IAAnB,CAAwBD,QAAQ,CAACf,IAAjC;AACD,OAHH;AAID,KAVM;;AAWP;;;;AAIAiB,eAAW,GAAG;AACZxB,WAAK,CAACoB,IAAN,CAAWhB,SAAX,EAAsB;AAAEI,mBAAW,EAAE,KAAKA,WAApB;AAAiCC,eAAO,EAAE,KAAKA;AAA/C,OAAtB,EACGY,IADH,CACSC,QAAD,IAAc;AAClB,aAAKX,SAAL,GAAiBW,QAAQ,CAACf,IAAT,CAAckB,IAA/B;AACD,OAHH;AAID,KApBM;;AAqBP;;;;AAIAX,gBAAY,CAACY,MAAD,EAAS;AACnB1B,WAAK,CAACoB,IAAN,CAAWf,aAAX,EAA0B;AAAEG,mBAAW,EAAE,KAAKA,WAApB;AAAiCC,eAAO,EAAEiB;AAA1C,OAA1B;AACD;;AA3BM,GAzBI;AAsDbC,UAAQ,EAAE;AACRC,WAAO,GAAG;AACR,UAAI,KAAKjB,SAAL,KAAmB,SAAvB,EAAkC;AAChC,eAAO,iBAAP;AACF;;AACA,aAAO,gBAAP;AACD;;AANO,GAtDG;;AA8DbkB,SAAO,GAAG;AACR,SAAKV,eAAL;AACA,SAAKK,WAAL;AACD;;AAjEY,CAAf","names":["ManagerConsole","MemberConsole","axios","require","default","ACTIVITY_INFO_URL","USER_ROLE","DELETE_MEMBER","components","data","activity_id","user_id","ACTIVITY_INFO","user_role","provide","activity_info","deleteMember","created","$route","params","methods","getActivityInfo","post","then","response","push","getUserRole","role","userId","computed","console","mounted"],"sourceRoot":"","sources":["D:\\MySQL\\pickup\\client\\src\\views\\ActivityManagementView.vue"],"sourcesContent":["<template>\n  <section>\n    <div class=\"home\">\n      <h1>This is the Activity Management page </h1>\n      <h2> The activity id is {{ activity_id }}</h2>\n      <h2> The user id is {{ user_id }}</h2>\n    </div>\n    <!-- dynamic components -->\n    <template>\n      <component :is=\"console\"></component>\n    </template>\n  </section>\n</template>\n\n<script>\nimport ManagerConsole from '../components/ActivityManagement/ManagerConsole.vue';\nimport MemberConsole from '../components/ActivityManagement/MemberConsole.vue';\n\nconst axios = require('axios').default;\n\nconst ACTIVITY_INFO_URL = 'http://localhost:4000/getActivityInfo';\nconst USER_ROLE = 'http://localhost:4000/getUserRole';\nconst DELETE_MEMBER = 'http://localhost:4000/quitActivity';\n\nexport default {\n  components: {\n    'manager-console': ManagerConsole,\n    'member-console': MemberConsole,\n  },\n  data() {\n    return {\n      activity_id: null,\n      user_id: null,\n      ACTIVITY_INFO: [],\n      user_role: '',\n    };\n  },\n  provide() {\n    return {\n      activity_info: this.ACTIVITY_INFO,\n      deleteMember: this.deleteMember,\n\n    };\n  },\n  created() {\n    // get the route parameter 'id' from router\n    this.activity_id = this.$route.params.activity_id;\n    this.user_id = this.$route.params.user_id;\n  },\n  methods: {\n    /**\n     * @description\n     * Return activity info of a specific activity with the provided activity_id\n     */\n    getActivityInfo() {\n      axios.post(ACTIVITY_INFO_URL, { activity_id: this.activity_id })\n        .then((response) => {\n          this.ACTIVITY_INFO.push(response.data);\n        });\n    },\n    /**\n     * @description\n     * Return the role of a user with the provided activity_id and user_id\n     */\n    getUserRole() {\n      axios.post(USER_ROLE, { activity_id: this.activity_id, user_id: this.user_id })\n        .then((response) => {\n          this.user_role = response.data.role;\n        });\n    },\n    /**\n     * @description\n     * Quit from the activity with provided activity_id and user_id\n     */\n    deleteMember(userId) {\n      axios.post(DELETE_MEMBER, { activity_id: this.activity_id, user_id: userId });\n    },\n  },\n  computed: {\n    console() {\n      if (this.user_role === 'MANAGER') {\n        return 'manager-console';\n      }\n      return 'member-console';\n    },\n  },\n  mounted() {\n    this.getActivityInfo();\n    this.getUserRole();\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}