{"ast":null,"code":"import managementConsole from '../components/ActivityManagement/ManagementConsole.vue';\n\nconst axios = require('axios').default;\n\nconst ACTIVITY_INFO_URL = 'http://localhost:4000/getActivityInfo';\nconst USER_ROLE = 'http://localhost:4000/getUserRole';\nconst DELETE_MEMBER = 'http://localhost:4000/quitActivity';\nconst CHANGE_MANAGER = 'http://localhost:4000/changeManager';\nconst TERMINATE_ACTIVITY = 'http://localhost:4000/terminateActivity';\nconst MEMBER_INFO = 'http://localhost:4000/getMemberInfo';\nexport default {\n  components: {\n    'management-console': managementConsole\n  },\n\n  data() {\n    return {\n      activity_id: null,\n      // Use array here because if set to null, the data cannot be pass through\n      user_id: [],\n      user_role: [],\n      ACTIVITY_INFO: [],\n      MEMBER_ID_LIST: [],\n      // The list of user_ids who take part in the activity\n      MEMBER_INFO: [] // Information of all the members\n\n    };\n  },\n\n  provide() {\n    return {\n      // Data\n      userId: this.user_id,\n      userRole: this.user_role,\n      activityInfo: this.ACTIVITY_INFO,\n      memberInfo: this.MEMBER_INFO,\n      // Methods\n      deleteMember: this.deleteMember,\n      changeManager: this.changeManager,\n      terminateActivity: this.terminateActivity\n    };\n  },\n\n  methods: {\n    /**\n     * @description\n     * Return activity info of a specific activity with the provided activity_id\n     */\n    getActivityInfo() {\n      const that = this;\n      axios.post(ACTIVITY_INFO_URL, {\n        activity_id: this.activity_id\n      }).then(response => {\n        that.ACTIVITY_INFO.push(response.data);\n      });\n    },\n\n    /**\n     * @description\n     * Return the role of a user with the provided activity_id and user_id\n     */\n    getUserRole() {\n      axios.post(USER_ROLE, {\n        activity_id: this.activity_id,\n        user_id: this.user_id\n      }).then(response => {\n        this.user_role.push(response.data.role);\n      });\n    },\n\n    /**\n     * @description\n     * Quit from the activity with provided activity_id and user_id\n     * If the user is a manager, we need to make sure there is at least another manager before\n     * he can execute this action\n     */\n    deleteMember(userId) {\n      axios.post(DELETE_MEMBER, {\n        activity_id: this.activity_id,\n        user_id: userId\n      });\n    },\n\n    /**\n     * @description\n     * Transfer the authority of activity manager to other member with provided new_manager_id\n     */\n    changeManager(newManagerId) {\n      axios.post(CHANGE_MANAGER, {\n        activity_id: this.activity_id,\n        new_manager_id: newManagerId,\n        old_manager_id: this.userId\n      });\n    },\n\n    /**\n     * @description\n     * Terminate the whole activity, can only be triggered by activity manager\n     */\n    terminateActivity() {\n      axios.post(TERMINATE_ACTIVITY, {\n        activity_id: this.activity_id\n      });\n    },\n\n    /**\n     * @description\n     * Get all the member info\n     */\n    getMemberInfo() {\n      axios.post(MEMBER_INFO, {\n        activity_id: this.activity_id\n      }).then(response => {\n        this.MEMBER_INFO.push(response.data);\n      });\n    }\n\n  },\n\n  mounted() {\n    this.getActivityInfo();\n    this.getUserRole();\n  },\n\n  created() {\n    // get the route parameter 'id' from router\n    this.activity_id = this.$route.params.activity_id;\n    this.user_id.push(this.$route.params.user_id);\n  }\n\n};","map":{"version":3,"mappings":"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","names":["managementConsole","axios","require","default","ACTIVITY_INFO_URL","USER_ROLE","DELETE_MEMBER","CHANGE_MANAGER","TERMINATE_ACTIVITY","MEMBER_INFO","components","data","activity_id","user_id","user_role","ACTIVITY_INFO","MEMBER_ID_LIST","provide","userId","userRole","activityInfo","memberInfo","deleteMember","changeManager","terminateActivity","methods","getActivityInfo","that","post","then","response","push","getUserRole","role","newManagerId","new_manager_id","old_manager_id","getMemberInfo","mounted","created","$route","params"],"sourceRoot":"","sources":["D:\\MySQL\\pickup\\client\\src\\views\\ActivityManagementView.vue"],"sourcesContent":["<template>\n  <section>\n    <div class=\"home\">\n      <h2>The activity id is {{ activity_id }}</h2>\n      <h2>The user id is {{ user_id }}</h2>\n    </div>\n    <management-console\n      v-for=\"activity in ACTIVITY_INFO\"\n      :key=\"activity.activity_id\"\n      :title=\"activity.title\"\n      :time=\"activity.time\"\n      :location=\"activity.location\"\n      :type=\"activity.type\"\n      :max_capacity=\"activity.max_capacity\"\n      :quota_left=\"activity.quota_left\"\n      :description=\"activity.description\"\n    ></management-console>\n  </section>\n</template>\n\n<script>\nimport managementConsole from '../components/ActivityManagement/ManagementConsole.vue';\n\nconst axios = require('axios').default;\n\nconst ACTIVITY_INFO_URL = 'http://localhost:4000/getActivityInfo';\nconst USER_ROLE = 'http://localhost:4000/getUserRole';\nconst DELETE_MEMBER = 'http://localhost:4000/quitActivity';\nconst CHANGE_MANAGER = 'http://localhost:4000/changeManager';\nconst TERMINATE_ACTIVITY = 'http://localhost:4000/terminateActivity';\nconst MEMBER_INFO = 'http://localhost:4000/getMemberInfo';\n\nexport default {\n  components: {\n    'management-console': managementConsole,\n  },\n  data() {\n    return {\n      activity_id: null,\n      // Use array here because if set to null, the data cannot be pass through\n      user_id: [],\n      user_role: [],\n      ACTIVITY_INFO: [],\n      MEMBER_ID_LIST: [], // The list of user_ids who take part in the activity\n      MEMBER_INFO: [], // Information of all the members\n    };\n  },\n  provide() {\n    return {\n      // Data\n      userId: this.user_id,\n      userRole: this.user_role,\n      activityInfo: this.ACTIVITY_INFO,\n      memberInfo: this.MEMBER_INFO,\n      // Methods\n      deleteMember: this.deleteMember,\n      changeManager: this.changeManager,\n      terminateActivity: this.terminateActivity,\n    };\n  },\n  methods: {\n    /**\n     * @description\n     * Return activity info of a specific activity with the provided activity_id\n     */\n    getActivityInfo() {\n      const that = this;\n      axios\n        .post(ACTIVITY_INFO_URL, { activity_id: this.activity_id })\n        .then((response) => {\n          that.ACTIVITY_INFO.push(response.data);\n        });\n    },\n    /**\n     * @description\n     * Return the role of a user with the provided activity_id and user_id\n     */\n    getUserRole() {\n      axios\n        .post(USER_ROLE, { activity_id: this.activity_id, user_id: this.user_id })\n        .then((response) => {\n          this.user_role.push(response.data.role);\n        });\n    },\n    /**\n     * @description\n     * Quit from the activity with provided activity_id and user_id\n     * If the user is a manager, we need to make sure there is at least another manager before\n     * he can execute this action\n     */\n    deleteMember(userId) {\n      axios.post(DELETE_MEMBER, { activity_id: this.activity_id, user_id: userId });\n    },\n    /**\n     * @description\n     * Transfer the authority of activity manager to other member with provided new_manager_id\n     */\n    changeManager(newManagerId) {\n      axios.post(CHANGE_MANAGER, {\n        activity_id: this.activity_id,\n        new_manager_id: newManagerId,\n        old_manager_id: this.userId,\n      });\n    },\n    /**\n     * @description\n     * Terminate the whole activity, can only be triggered by activity manager\n     */\n    terminateActivity() {\n      axios.post(TERMINATE_ACTIVITY, { activity_id: this.activity_id });\n    },\n    /**\n     * @description\n     * Get all the member info\n     */\n    getMemberInfo() {\n      axios\n        .post(MEMBER_INFO, { activity_id: this.activity_id })\n        .then((response) => {\n          this.MEMBER_INFO.push(response.data);\n        });\n    },\n  },\n  mounted() {\n    this.getActivityInfo();\n    this.getUserRole();\n  },\n  created() {\n    // get the route parameter 'id' from router\n    this.activity_id = this.$route.params.activity_id;\n    this.user_id.push(this.$route.params.user_id);\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}