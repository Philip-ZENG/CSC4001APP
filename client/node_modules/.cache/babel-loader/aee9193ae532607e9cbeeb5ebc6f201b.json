{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"btn-group\"\n};\nconst _hoisted_2 = {\n  type: \"button\",\n  class: \"btn btn-danger dropdown-toggle\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"dropdown-menu\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"button\", _hoisted_2, _toDisplayString($props.memberName), 1\n  /* TEXT */\n  ), $options.showDropdown ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_3, [_createElementVNode(\"li\", null, [_createElementVNode(\"button\", {\n    class: \"dropdown-item\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.deleteMember && $options.deleteMember(...args))\n  }, \"Delete\")]), _createElementVNode(\"li\", null, [_createElementVNode(\"button\", {\n    class: \"dropdown-item\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.modifyManager && $options.modifyManager(...args))\n  }, \"Set As Manager\")])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;AACOA,OAAK,EAAC;;;AAEPC,MAAI,EAAC;AACLD,OAAK,EAAC;AACN,oBAAe;AACf,mBAAc;;;;AAIZA,OAAK,EAAC;;;uBATZE,oBAaM,KAbN,cAaM,CAZJC,oBAOS,QAPT,cAOSC,iBADJC,iBACI,CAPT,EAMe;AAAA;AANf,GAYI,EAJ4BC,uCAAhCJ,oBAGK,IAHL,cAGK,CAFHC,oBAA4E,IAA5E,EAA4E,IAA5E,EAA4E,CAAxEA,oBAAmE,QAAnE,EAAmE;AAA3DH,SAAK,EAAC,eAAqD;AAApCO,WAAK,yCAAED,uDAAF;AAA+B,GAAnE,EAAoD,QAApD,CAAwE,CAA5E,CAEG,EADHH,oBAAqF,IAArF,EAAqF,IAArF,EAAqF,CAAjFA,oBAA4E,QAA5E,EAA4E;AAApEH,SAAK,EAAC,eAA8D;AAA7CO,WAAK,yCAAED,yDAAF;AAAwC,GAA5E,EAAqD,gBAArD,CAAiF,CAArF,CACG,CAHL,sCAII,CAbN","names":["class","type","_createElementBlock","_createElementVNode","_toDisplayString","$props","$options","onClick"],"sourceRoot":"","sources":["D:\\MySQL\\pickup\\client\\src\\components\\ActivityManagement\\MemberItem.vue"],"sourcesContent":["<template>\n  <div class=\"btn-group\">\n    <button\n      type=\"button\"\n      class=\"btn btn-danger dropdown-toggle\"\n      data-bs-toggle=\"dropdown\"\n      aria-expanded=\"false\"\n    >\n      {{ memberName }}\n    </button>\n    <ul class=\"dropdown-menu\" v-if=\"showDropdown\">\n      <li><button class=\"dropdown-item\" @click=\"deleteMember\">Delete</button></li>\n      <li><button class=\"dropdown-item\" @click=\"modifyManager\">Set As Manager</button></li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    memberName: { type: String, required: true },\n    memberId: { type: Number, required: true },\n  },\n  inject: [\n    // Data\n    'userId', 'userRole',\n    // Methods\n    'deleteMember', 'changeManager',\n  ],\n  computed: {\n    /**\n     * @description\n     * Only show the dropdown(delete/change manager option) when the member iterm is not the user\n     * And when the user is activity manager\n     */\n    showDropdown() {\n      return this.memberId === this.userId && this.userRole === 'MANAGER';\n    },\n  },\n  methods: {\n    /**\n     * @description\n     * Give the users' Manager authority/identity to others\n     */\n    modifyManager() {\n      // eslint-disable-next-line\n      if (confirm('Are you sure that you want to transfer your Manager identity to others?')) {\n        this.changeManager(this.memberId);\n      }\n    },\n    /**\n     * @description\n     * Delete a member from an activity with provided activity_id\n     */\n    deleteMember() {\n      // eslint-disable-next-line\n      if (confirm('Are you sure that you want to delete the member from this activity?')) {\n        this.deleteMember(this.memberId);\n      }\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}