{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_activity_management_console = _resolveComponent(\"activity-management-console\");\n\n  return _openBlock(), _createElementBlock(\"section\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.ACTIVITY_INFO, activity => {\n    return _openBlock(), _createBlock(_component_activity_management_console, {\n      key: activity.activity_id,\n      title: activity.title,\n      time: activity.time,\n      location: activity.location,\n      type: activity.type,\n      max_capacity: activity.max_capacity,\n      quota_left: activity.quota_left,\n      description: activity.description\n    }, null, 8\n    /* PROPS */\n    , [\"title\", \"time\", \"location\", \"type\", \"max_capacity\", \"quota_left\", \"description\"]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]);\n}","map":{"version":3,"mappings":";;;;uBACEA,oBAYU,SAZV,EAYU,IAZV,EAYU,oBAXRA,oBAU+BC,SAV/B,EAU+B,IAV/B,EAU+BC,YATVC,mBASU,EATtBC,QAAyB,IAAjB;yBADjBC,aAU+BC,sCAV/B,EAU+B;AAR5BC,SAAG,EAAEH,QAAQ,CAACI,WAQc;AAP5BC,WAAK,EAAEL,QAAQ,CAACK,KAOY;AAN5BC,UAAI,EAAEN,QAAQ,CAACM,IAMa;AAL5BC,cAAQ,EAAEP,QAAQ,CAACO,QAKS;AAJ5BC,UAAI,EAAER,QAAQ,CAACQ,IAIa;AAH5BC,kBAAY,EAAET,QAAQ,CAACS,YAGK;AAF5BC,gBAAU,EAAEV,QAAQ,CAACU,UAEO;AAD5BC,iBAAW,EAAEX,QAAQ,CAACW;AACM,KAV/B;;AAAA;GAU+B,CAV/B;;AAAA,GAWQ,EAZV","names":["_createElementBlock","_Fragment","_renderList","$data","activity","_createBlock","_component_activity_management_console","key","activity_id","title","time","location","type","max_capacity","quota_left","description"],"sourceRoot":"","sources":["D:\\MySQL\\pickup\\client\\src\\views\\ActivityManagementView.vue"],"sourcesContent":["<template>\r\n  <section>\r\n    <activity-management-console\r\n      v-for=\"activity in ACTIVITY_INFO\"\r\n      :key=\"activity.activity_id\"\r\n      :title=\"activity.title\"\r\n      :time=\"activity.time\"\r\n      :location=\"activity.location\"\r\n      :type=\"activity.type\"\r\n      :max_capacity=\"activity.max_capacity\"\r\n      :quota_left=\"activity.quota_left\"\r\n      :description=\"activity.description\"\r\n    ></activity-management-console>\r\n  </section>\r\n</template>\r\n\r\n<script>\r\nimport ActivityManagementConsole from '../components/ActivityManagement/ActivityManagementConsole.vue';\r\n\r\nconst axios = require('axios').default;\r\n\r\nconst ACTIVITY_INFO_URL = 'http://localhost:4000/getActivityInfo';\r\nconst USER_ROLE = 'http://localhost:4000/getUserRole';\r\nconst DELETE_MEMBER = 'http://localhost:4000/quitActivity';\r\nconst CHANGE_MANAGER = 'http://localhost:4000/changeManager';\r\nconst TERMINATE_ACTIVITY = 'http://localhost:4000/terminateActivity';\r\nconst MEMBER_INFO = 'http://localhost:4000/getMemberInfo';\r\n\r\nexport default {\r\n  components: {\r\n    'activity-management-console': ActivityManagementConsole,\r\n  },\r\n  data() {\r\n    return {\r\n      activity_id: null,\r\n      // Use array here because if set to null, the data cannot be pass through\r\n      user_id: [],\r\n      user_role: [],\r\n      ACTIVITY_INFO: [],\r\n      MEMBER_ID_LIST: [], // The list of user_ids who take part in the activity\r\n      MEMBER_INFO: [], // Information of all the members\r\n    };\r\n  },\r\n  provide() {\r\n    return {\r\n      // Data\r\n      userId: this.user_id,\r\n      userRole: this.user_role,\r\n      activityInfo: this.ACTIVITY_INFO,\r\n      memberInfo: this.MEMBER_INFO,\r\n      // Methods\r\n      deleteMember: this.deleteMember,\r\n      changeManager: this.changeManager,\r\n      terminateActivity: this.terminateActivity,\r\n    };\r\n  },\r\n  methods: {\r\n    /**\r\n     * @description\r\n     * Return activity info of a specific activity with the provided activity_id\r\n     */\r\n    getActivityInfo() {\r\n      const that = this;\r\n      axios\r\n        .post(ACTIVITY_INFO_URL, { activity_id: this.activity_id })\r\n        .then((response) => {\r\n          that.ACTIVITY_INFO.push(response.data);\r\n        });\r\n    },\r\n    /**\r\n     * @description\r\n     * Return the role of a user with the provided activity_id and user_id\r\n     */\r\n    getUserRole() {\r\n      axios\r\n        .post(USER_ROLE, { activity_id: this.activity_id, user_id: this.user_id })\r\n        .then((response) => {\r\n          this.user_role.push(response.data.role);\r\n        });\r\n    },\r\n    /**\r\n     * @description\r\n     * Quit from the activity with provided activity_id and user_id\r\n     * If the user is a manager, we need to make sure there is at least another manager before\r\n     * he can execute this action\r\n     */\r\n    deleteMember(userId) {\r\n      axios.post(DELETE_MEMBER, { activity_id: this.activity_id, user_id: userId });\r\n    },\r\n    /**\r\n     * @description\r\n     * Transfer the authority of activity manager to other member with provided new_manager_id\r\n     */\r\n    changeManager(newManagerId) {\r\n      axios.post(CHANGE_MANAGER, {\r\n        activity_id: this.activity_id,\r\n        new_manager_id: newManagerId,\r\n        old_manager_id: this.user_id[0],\r\n      });\r\n    },\r\n    /**\r\n     * @description\r\n     * Terminate the whole activity, can only be triggered by activity manager\r\n     */\r\n    terminateActivity() {\r\n      axios.post(TERMINATE_ACTIVITY, { activity_id: this.activity_id });\r\n    },\r\n    /**\r\n     * @description\r\n     * Get all the member info\r\n     */\r\n    getMemberInfo() {\r\n      axios\r\n        .post(MEMBER_INFO, { activity_id: this.activity_id })\r\n        .then((response) => {\r\n          this.MEMBER_INFO.push(response.data);\r\n        });\r\n    },\r\n  },\r\n  mounted() {\r\n    this.getActivityInfo();\r\n    this.getUserRole();\r\n    this.getMemberInfo();\r\n  },\r\n  created() {\r\n    // get the route parameter 'id' from router\r\n    this.activity_id = this.$route.params.activity_id;\r\n    this.user_id.push(this.$route.params.user_id);\r\n  },\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}