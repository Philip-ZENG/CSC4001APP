{"ast":null,"code":"import managementConsole from '../components/ActivityManagement/ManagementConsole.vue';\n\nconst axios = require('axios').default;\n\nconst ACTIVITY_INFO_URL = 'http://localhost:4000/getActivityInfo';\nconst USER_ROLE = 'http://localhost:4000/getUserRole';\nconst DELETE_MEMBER = 'http://localhost:4000/quitActivity';\nconst CHANGE_MANAGER = 'http://localhost:4000/changeManager';\nconst TERMINATE_ACTIVITY = 'http://localhost:4000/terminateActivity';\nconst MEMBER_LIST = 'http://localhost:4000/getMemberList';\nexport default {\n  components: {\n    'management-console': managementConsole\n  },\n\n  data() {\n    return {\n      activity_id: null,\n      // Use array here because if set to null, the data cannot be pass through\n      user_id: [],\n      user_role: [],\n      manager_id: [],\n      ACTIVITY_INFO: [],\n      MEMBER_ID_LIST: [],\n      // The list of user_ids who take part in the activity\n      MEMBER_INFO: [] // Information of all the members\n\n    };\n  },\n\n  provide() {\n    return {\n      // Data\n      userId: this.user_id,\n      userRole: this.user_role,\n      activityInfo: this.ACTIVITY_INFO,\n      memberIdList: this.MEMBER_ID_LIST,\n      memberInfo: this.MEMBER_INFO,\n      managerId: this.manager_id,\n      // Methods\n      deleteMember: this.deleteMember,\n      changeManager: this.changeManager,\n      terminateActivity: this.terminateActivity\n    };\n  },\n\n  methods: {\n    /**\n     * @description\n     * Return activity info of a specific activity with the provided activity_id\n     */\n    getActivityInfo() {\n      const that = this;\n      axios.post(ACTIVITY_INFO_URL, {\n        activity_id: this.activity_id\n      }).then(response => {\n        that.ACTIVITY_INFO.push(response.data);\n        console.log(that.ACTIVITY_INFO);\n      });\n    },\n\n    /**\n     * @description\n     * Return the role of a user with the provided activity_id and user_id\n     */\n    getUserRole() {\n      axios.post(USER_ROLE, {\n        activity_id: this.activity_id,\n        user_id: this.user_id\n      }).then(response => {\n        this.user_role.push(response.data.role);\n      });\n    },\n\n    /**\n     * @description\n     * Quit from the activity with provided activity_id and user_id\n     * If the user is a manager, we need to make sure there is at least another manager before\n     * he can execute this action\n     */\n    deleteMember(userId) {\n      axios.post(DELETE_MEMBER, {\n        activity_id: this.activity_id,\n        user_id: userId\n      });\n    },\n\n    /**\n     * @description\n     * Transfer the authority of activity manager to other member with provided new_manager_id\n     */\n    changeManager(newManagerId) {\n      axios.post(CHANGE_MANAGER, {\n        activity_id: this.activity_id,\n        new_manager_id: newManagerId,\n        old_manager_id: this.userId\n      });\n    },\n\n    /**\n     * @description\n     * Terminate the whole activity, can only be triggered by activity manager\n     */\n    terminateActivity() {\n      axios.post(TERMINATE_ACTIVITY, {\n        activity_id: this.activity_id\n      });\n    },\n\n    /**\n     * @description\n     * Get the list of users who has the take part in the activity with provided activity_id\n     */\n    getMemberList() {\n      axios.post(MEMBER_LIST, {\n        activity_id: this.activity_id\n      });\n    }\n\n  },\n\n  mounted() {\n    this.getActivityInfo();\n    this.getUserRole();\n  },\n\n  created() {\n    // get the route parameter 'id' from router\n    this.activity_id = this.$route.params.activity_id;\n    this.user_id.push(this.$route.params.user_id);\n  }\n\n};","map":{"version":3,"mappings":"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","names":["managementConsole","axios","require","default","ACTIVITY_INFO_URL","USER_ROLE","DELETE_MEMBER","CHANGE_MANAGER","TERMINATE_ACTIVITY","MEMBER_LIST","components","data","activity_id","user_id","user_role","manager_id","ACTIVITY_INFO","MEMBER_ID_LIST","MEMBER_INFO","provide","userId","userRole","activityInfo","memberIdList","memberInfo","managerId","deleteMember","changeManager","terminateActivity","methods","getActivityInfo","that","post","then","response","push","console","log","getUserRole","role","newManagerId","new_manager_id","old_manager_id","getMemberList","mounted","created","$route","params"],"sourceRoot":"","sources":["D:\\MySQL\\pickup\\client\\src\\views\\ActivityManagementView.vue"],"sourcesContent":["<template>\n  <section>\n    <div class=\"home\">\n      <h2>The activity id is {{ activity_id }}</h2>\n      <h2>The user id is {{ user_id }}</h2>\n    </div>\n    <management-console></management-console>\n  </section>\n</template>\n\n<script>\nimport managementConsole from '../components/ActivityManagement/ManagementConsole.vue';\n\nconst axios = require('axios').default;\n\nconst ACTIVITY_INFO_URL = 'http://localhost:4000/getActivityInfo';\nconst USER_ROLE = 'http://localhost:4000/getUserRole';\nconst DELETE_MEMBER = 'http://localhost:4000/quitActivity';\nconst CHANGE_MANAGER = 'http://localhost:4000/changeManager';\nconst TERMINATE_ACTIVITY = 'http://localhost:4000/terminateActivity';\nconst MEMBER_LIST = 'http://localhost:4000/getMemberList';\n\nexport default {\n  components: {\n    'management-console': managementConsole,\n  },\n  data() {\n    return {\n      activity_id: null,\n      // Use array here because if set to null, the data cannot be pass through\n      user_id: [],\n      user_role: [],\n      manager_id: [],\n      ACTIVITY_INFO: [],\n      MEMBER_ID_LIST: [], // The list of user_ids who take part in the activity\n      MEMBER_INFO: [], // Information of all the members\n    };\n  },\n  provide() {\n    return {\n      // Data\n      userId: this.user_id,\n      userRole: this.user_role,\n      activityInfo: this.ACTIVITY_INFO,\n      memberIdList: this.MEMBER_ID_LIST,\n      memberInfo: this.MEMBER_INFO,\n      managerId: this.manager_id,\n      // Methods\n      deleteMember: this.deleteMember,\n      changeManager: this.changeManager,\n      terminateActivity: this.terminateActivity,\n    };\n  },\n  methods: {\n    /**\n     * @description\n     * Return activity info of a specific activity with the provided activity_id\n     */\n    getActivityInfo() {\n      const that = this;\n      axios.post(ACTIVITY_INFO_URL, { activity_id: this.activity_id }).then((response) => {\n        that.ACTIVITY_INFO.push(response.data);\n        console.log(that.ACTIVITY_INFO);\n      });\n    },\n    /**\n     * @description\n     * Return the role of a user with the provided activity_id and user_id\n     */\n    getUserRole() {\n      axios\n        .post(USER_ROLE, { activity_id: this.activity_id, user_id: this.user_id })\n        .then((response) => {\n          this.user_role.push(response.data.role);\n        });\n    },\n    /**\n     * @description\n     * Quit from the activity with provided activity_id and user_id\n     * If the user is a manager, we need to make sure there is at least another manager before\n     * he can execute this action\n     */\n    deleteMember(userId) {\n      axios.post(DELETE_MEMBER, { activity_id: this.activity_id, user_id: userId });\n    },\n    /**\n     * @description\n     * Transfer the authority of activity manager to other member with provided new_manager_id\n     */\n    changeManager(newManagerId) {\n      axios.post(CHANGE_MANAGER, {\n        activity_id: this.activity_id,\n        new_manager_id: newManagerId,\n        old_manager_id: this.userId,\n      });\n    },\n    /**\n     * @description\n     * Terminate the whole activity, can only be triggered by activity manager\n     */\n    terminateActivity() {\n      axios.post(TERMINATE_ACTIVITY, { activity_id: this.activity_id });\n    },\n    /**\n     * @description\n     * Get the list of users who has the take part in the activity with provided activity_id\n     */\n    getMemberList() {\n      axios.post(MEMBER_LIST, { activity_id: this.activity_id });\n    },\n  },\n  mounted() {\n    this.getActivityInfo();\n    this.getUserRole();\n  },\n  created() {\n    // get the route parameter 'id' from router\n    this.activity_id = this.$route.params.activity_id;\n    this.user_id.push(this.$route.params.user_id);\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}