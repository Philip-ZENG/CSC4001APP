{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"btn-group\"\n};\nconst _hoisted_2 = {\n  type: \"button\",\n  class: \"btn btn-primary dropdown-toggle\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n};\nconst _hoisted_3 = {\n  class: \"dropdown-menu\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"button\", _hoisted_2, _toDisplayString($props.memberName), 1\n  /* TEXT */\n  ), _createElementVNode(\"ul\", _hoisted_3, [_createElementVNode(\"li\", null, [$options.showDropdown ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"dropdown-item\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.deleteMember && $options.deleteMember(...args))\n  }, \"Delete\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"li\", null, [$options.showDropdown ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"dropdown-item\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.modifyManager && $options.modifyManager(...args))\n  }, \" Set As Manager \")) : _createCommentVNode(\"v-if\", true)])])]);\n}","map":{"version":3,"mappings":";;AACOA,OAAK,EAAC;;;AAEPC,MAAI,EAAC;AACLD,OAAK,EAAC;AACN,oBAAe;AACf,mBAAc;;;AAIZA,OAAK,EAAC;;;uBATZE,oBAmBM,KAnBN,cAmBM,CAlBJC,oBAOS,QAPT,cAOSC,iBADJC,iBACI,CAPT,EAMe;AAAA;AANf,GAkBI,EAVJF,oBASK,IATL,cASK,CARHA,oBAEK,IAFL,EAEK,IAFL,EAEK,CADuDG,uCAA1DJ,oBAAuF,QAAvF,EAAuF;UAAA;AAA/EF,SAAK,EAAC,eAAyE;AAAxDO,WAAK,yCAAED,uDAAF;AAAmD,GAAvF,EAAwE,QAAxE,sCACG,CAFL,CAQG,EALHH,oBAIK,IAJL,EAIK,IAJL,EAIK,CAHwDG,uCAA3DJ,oBAES,QAFT,EAES;UAAA;AAFDF,SAAK,EAAC,eAEL;AAFsBO,WAAK,yCAAED,yDAAF;AAE3B,GAFT,EAAyE,kBAAzE,sCAGG,CAJL,CAKG,CATL,CAUI,CAnBN","names":["class","type","_createElementBlock","_createElementVNode","_toDisplayString","$props","$options","onClick"],"sourceRoot":"","sources":["D:\\MySQL\\pickup\\client\\src\\components\\ActivityManagement\\MemberItem.vue"],"sourcesContent":["<template>\n  <div class=\"btn-group\">\n    <button\n      type=\"button\"\n      class=\"btn btn-primary dropdown-toggle\"\n      data-bs-toggle=\"dropdown\"\n      aria-expanded=\"false\"\n    >\n      {{ memberName }}\n    </button>\n    <ul class=\"dropdown-menu\">\n      <li>\n        <button class=\"dropdown-item\" @click=\"deleteMember\" v-if=\"showDropdown\">Delete</button>\n      </li>\n      <li>\n        <button class=\"dropdown-item\" @click=\"modifyManager\" v-if=\"showDropdown\">\n          Set As Manager\n        </button>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    memberName: { type: String, required: true },\n    memberId: { type: Number, required: true },\n  },\n  inject: [\n    // Data\n    'userId',\n    'userRole',\n    // Methods\n    'deleteMember',\n    'changeManager',\n  ],\n  computed: {\n    /**\n     * @description\n     * Only show the dropdown(delete/change manager option) when the member iterm is not the user\n     * And when the user is activity manager\n     */\n    showDropdown() {\n      return this.memberId === this.userId && this.userRole === 'MANAGER';\n    },\n  },\n  methods: {\n    /**\n     * @description\n     * Give the users' Manager authority/identity to others\n     */\n    modifyManager() {\n      // eslint-disable-next-line\n      if (confirm('Are you sure that you want to transfer your Manager identity to others?')) {\n        this.changeManager(this.memberId);\n      }\n    },\n    /**\n     * @description\n     * Delete a member from an activity with provided activity_id\n     */\n    deleteMember() {\n      // eslint-disable-next-line\n      if (confirm('Are you sure that you want to delete the member from this activity?')) {\n        this.deleteMember(this.memberId);\n      }\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}