{"ast":null,"code":"import managementConsole from '../components/ActivityManagement/ManagementConsole.vue';\n\nconst axios = require('axios').default;\n\nconst ACTIVITY_INFO_URL = 'http://localhost:4000/getActivityInfo';\nconst USER_ROLE = 'http://localhost:4000/getUserRole';\nconst DELETE_MEMBER = 'http://localhost:4000/quitActivity';\nconst CHANGE_MANAGER = 'http://localhost:4000/changeManager';\nconst TERMINATE_ACTIVITY = 'http://localhost:4000/terminateActivity';\nconst MEMBER_LIST = 'http://localhost:4000/getMemberList';\nexport default {\n  components: {\n    'management-console': managementConsole\n  },\n\n  data() {\n    return {\n      activity_id: null,\n      // Use array here because if set to null, the data cannot be pass through\n      user_id: [],\n      user_role: [],\n      // The dummy data is to solve the error caused by accessing \n      // undefined attribute caused by loading latency\n      ACTIVITY_INFO: [{\n        activity_id: null,\n        title: '',\n        time: '',\n        location: '',\n        description: '',\n        max_capacity: null,\n        quota_left: null,\n        type: '',\n        heat: null\n      }],\n      MEMBER_ID_LIST: [],\n      // The list of user_ids who take part in the activity\n      MEMBER_INFO: [] // Information of all the members\n\n    };\n  },\n\n  provide() {\n    return {\n      // Data\n      userId: this.user_id,\n      userRole: this.user_role,\n      activityInfo: this.ACTIVITY_INFO,\n      memberIdList: this.MEMBER_ID_LIST,\n      memberInfo: this.MEMBER_INFO,\n      // Methods\n      deleteMember: this.deleteMember,\n      changeManager: this.changeManager,\n      terminateActivity: this.terminateActivity\n    };\n  },\n\n  methods: {\n    /**\n     * @description\n     * Return activity info of a specific activity with the provided activity_id\n     */\n    getActivityInfo() {\n      const that = this;\n      axios.post(ACTIVITY_INFO_URL, {\n        activity_id: this.activity_id\n      }).then(response => {\n        that.ACTIVITY_INFO.push(response.data);\n      });\n    },\n\n    /**\n     * @description\n     * Return the role of a user with the provided activity_id and user_id\n     */\n    getUserRole() {\n      axios.post(USER_ROLE, {\n        activity_id: this.activity_id,\n        user_id: this.user_id\n      }).then(response => {\n        this.user_role.push(response.data.role);\n      });\n    },\n\n    /**\n     * @description\n     * Quit from the activity with provided activity_id and user_id\n     * If the user is a manager, we need to make sure there is at least another manager before\n     * he can execute this action\n     */\n    deleteMember(userId) {\n      axios.post(DELETE_MEMBER, {\n        activity_id: this.activity_id,\n        user_id: userId\n      });\n    },\n\n    /**\n     * @description\n     * Transfer the authority of activity manager to other member with provided new_manager_id\n     */\n    changeManager(newManagerId) {\n      axios.post(CHANGE_MANAGER, {\n        activity_id: this.activity_id,\n        new_manager_id: newManagerId,\n        old_manager_id: this.userId\n      });\n    },\n\n    /**\n     * @description\n     * Terminate the whole activity, can only be triggered by activity manager\n     */\n    terminateActivity() {\n      axios.post(TERMINATE_ACTIVITY, {\n        activity_id: this.activity_id\n      });\n    },\n\n    /**\n     * @description\n     * Get the list of users who has the take part in the activity with provided activity_id\n     */\n    getMemberList() {\n      axios.post(MEMBER_LIST, {\n        activity_id: this.activity_id\n      });\n    }\n\n  },\n\n  mounted() {\n    this.getActivityInfo();\n    this.getUserRole();\n  },\n\n  created() {\n    // get the route parameter 'id' from router\n    this.activity_id = this.$route.params.activity_id;\n    this.user_id.push(this.$route.params.user_id);\n  }\n\n};","map":{"version":3,"mappings":"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","names":["managementConsole","axios","require","default","ACTIVITY_INFO_URL","USER_ROLE","DELETE_MEMBER","CHANGE_MANAGER","TERMINATE_ACTIVITY","MEMBER_LIST","components","data","activity_id","user_id","user_role","ACTIVITY_INFO","title","time","location","description","max_capacity","quota_left","type","heat","MEMBER_ID_LIST","MEMBER_INFO","provide","userId","userRole","activityInfo","memberIdList","memberInfo","deleteMember","changeManager","terminateActivity","methods","getActivityInfo","that","post","then","response","push","getUserRole","role","newManagerId","new_manager_id","old_manager_id","getMemberList","mounted","created","$route","params"],"sourceRoot":"","sources":["D:\\MySQL\\pickup\\client\\src\\views\\ActivityManagementView.vue"],"sourcesContent":["<template>\n  <section>\n    <div class=\"home\">\n      <h2>The activity id is {{ activity_id }}</h2>\n      <h2>The user id is {{ user_id }}</h2>\n    </div>\n    <management-console></management-console>\n  </section>\n</template>\n\n<script>\nimport managementConsole from '../components/ActivityManagement/ManagementConsole.vue';\n\nconst axios = require('axios').default;\n\nconst ACTIVITY_INFO_URL = 'http://localhost:4000/getActivityInfo';\nconst USER_ROLE = 'http://localhost:4000/getUserRole';\nconst DELETE_MEMBER = 'http://localhost:4000/quitActivity';\nconst CHANGE_MANAGER = 'http://localhost:4000/changeManager';\nconst TERMINATE_ACTIVITY = 'http://localhost:4000/terminateActivity';\nconst MEMBER_LIST = 'http://localhost:4000/getMemberList';\n\nexport default {\n  components: {\n    'management-console': managementConsole,\n  },\n  data() {\n    return {\n      activity_id: null,\n      // Use array here because if set to null, the data cannot be pass through\n      user_id: [],\n      user_role: [],\n      // The dummy data is to solve the error caused by accessing \n      // undefined attribute caused by loading latency\n      ACTIVITY_INFO: [\n        {\n          activity_id: null,\n          title: '',\n          time: '',\n          location: '',\n          description: '',\n          max_capacity: null,\n          quota_left: null,\n          type: '',\n          heat: null,\n        },\n      ],\n      MEMBER_ID_LIST: [], // The list of user_ids who take part in the activity\n      MEMBER_INFO: [], // Information of all the members\n    };\n  },\n  provide() {\n    return {\n      // Data\n      userId: this.user_id,\n      userRole: this.user_role,\n      activityInfo: this.ACTIVITY_INFO,\n      memberIdList: this.MEMBER_ID_LIST,\n      memberInfo: this.MEMBER_INFO,\n      // Methods\n      deleteMember: this.deleteMember,\n      changeManager: this.changeManager,\n      terminateActivity: this.terminateActivity,\n    };\n  },\n  methods: {\n    /**\n     * @description\n     * Return activity info of a specific activity with the provided activity_id\n     */\n    getActivityInfo() {\n      const that = this;\n      axios.post(ACTIVITY_INFO_URL, { activity_id: this.activity_id }).then((response) => {\n        that.ACTIVITY_INFO.push(response.data);\n      });\n    },\n    /**\n     * @description\n     * Return the role of a user with the provided activity_id and user_id\n     */\n    getUserRole() {\n      axios\n        .post(USER_ROLE, { activity_id: this.activity_id, user_id: this.user_id })\n        .then((response) => {\n          this.user_role.push(response.data.role);\n        });\n    },\n    /**\n     * @description\n     * Quit from the activity with provided activity_id and user_id\n     * If the user is a manager, we need to make sure there is at least another manager before\n     * he can execute this action\n     */\n    deleteMember(userId) {\n      axios.post(DELETE_MEMBER, { activity_id: this.activity_id, user_id: userId });\n    },\n    /**\n     * @description\n     * Transfer the authority of activity manager to other member with provided new_manager_id\n     */\n    changeManager(newManagerId) {\n      axios.post(CHANGE_MANAGER, {\n        activity_id: this.activity_id,\n        new_manager_id: newManagerId,\n        old_manager_id: this.userId,\n      });\n    },\n    /**\n     * @description\n     * Terminate the whole activity, can only be triggered by activity manager\n     */\n    terminateActivity() {\n      axios.post(TERMINATE_ACTIVITY, { activity_id: this.activity_id });\n    },\n    /**\n     * @description\n     * Get the list of users who has the take part in the activity with provided activity_id\n     */\n    getMemberList() {\n      axios.post(MEMBER_LIST, { activity_id: this.activity_id });\n    },\n  },\n  mounted() {\n    this.getActivityInfo();\n    this.getUserRole();\n  },\n  created() {\n    // get the route parameter 'id' from router\n    this.activity_id = this.$route.params.activity_id;\n    this.user_id.push(this.$route.params.user_id);\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}