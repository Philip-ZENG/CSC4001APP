{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"home\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"This is the Activity Management page\", -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_management_console = _resolveComponent(\"management-console\");\n\n  return _openBlock(), _createElementBlock(\"section\", null, [_createElementVNode(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"h2\", null, \"The activity id is \" + _toDisplayString($data.activity_id), 1\n  /* TEXT */\n  ), _createElementVNode(\"h2\", null, \"The user id is \" + _toDisplayString($data.user_id), 1\n  /* TEXT */\n  )]), _createVNode(_component_management_console)]);\n}","map":{"version":3,"mappings":";;AAESA,OAAK,EAAC;;;gCACTC,oBAA6C,IAA7C,EAA6C,IAA7C,EAAI,sCAAJ,EAAwC;AAAA;AAAxC;;;;;uBAFJC,oBAOU,SAPV,EAOU,IAPV,EAOU,CANRD,oBAIM,KAJN,cAIM,CAHJE,UAGI,EAFJF,oBAA6C,IAA7C,EAA6C,IAA7C,EAAI,wBAAmBG,iBAAGC,iBAAH,CAAvB,EAAqC;AAAA;AAArC,GAEI,EADJJ,oBAAqC,IAArC,EAAqC,IAArC,EAAI,oBAAeG,iBAAGC,aAAH,CAAnB,EAA6B;AAAA;AAA7B,GACI,CAJN,CAMQ,EADRC,aAAyCC,6BAAzC,CACQ,CAPV","names":["class","_createElementVNode","_createElementBlock","_hoisted_2","_toDisplayString","$data","_createVNode","_component_management_console"],"sourceRoot":"","sources":["D:\\MySQL\\pickup\\client\\src\\views\\ActivityManagementView.vue"],"sourcesContent":["<template>\n  <section>\n    <div class=\"home\">\n      <h1>This is the Activity Management page</h1>\n      <h2>The activity id is {{ activity_id }}</h2>\n      <h2>The user id is {{ user_id }}</h2>\n    </div>\n    <management-console></management-console>\n  </section>\n</template>\n\n<script>\nimport managementConsole from '../components/ActivityManagement/ManagementConsole.vue';\n\nconst axios = require('axios').default;\n\nconst ACTIVITY_INFO_URL = 'http://localhost:4000/getActivityInfo';\nconst USER_ROLE = 'http://localhost:4000/getUserRole';\nconst DELETE_MEMBER = 'http://localhost:4000/quitActivity';\nconst CHANGE_MANAGER = 'http://localhost:4000/changeManager';\nconst TERMINATE_ACTIVITY = 'http://localhost:4000/terminateActivity';\n\nexport default {\n  components: {\n    'management-console': managementConsole,\n  },\n  data() {\n    return {\n      activity_id: null,\n      // Use array here because if set to null, the data cannot be pass through\n      user_id: [],\n      user_role: [],\n      ACTIVITY_INFO: [],\n      MEMBER_ID: [],\n      MEMBER_INFO: [],\n    };\n  },\n  provide() {\n    return {\n      userId: this.user_id,\n      userRole: this.user_role,\n      activityInfo: this.ACTIVITY_INFO,\n      deleteMember: this.deleteMember,\n      memberId: this.memberId,\n      memberInfo: this.memberInfo,\n    };\n  },\n  methods: {\n    /**\n     * @description\n     * Return activity info of a specific activity with the provided activity_id\n     */\n    getActivityInfo() {\n      axios.post(ACTIVITY_INFO_URL, { activity_id: this.activity_id }).then((response) => {\n        this.ACTIVITY_INFO.push(response.data);\n      });\n    },\n    /**\n     * @description\n     * Return the role of a user with the provided activity_id and user_id\n     */\n    getUserRole() {\n      axios\n        .post(USER_ROLE, { activity_id: this.activity_id, user_id: this.user_id })\n        .then((response) => {\n          this.user_role.push(response.data.role);\n        });\n    },\n    /**\n     * @description\n     * Quit from the activity with provided activity_id and user_id\n     */\n    deleteMember(userId) {\n      axios.post(DELETE_MEMBER, { activity_id: this.activity_id, user_id: userId });\n    },\n    /**\n     * @description\n     * Transfer the authority of activity manager to other member with provided new_manager_id\n     */\n    changeManager(newManagerId) {\n      axios.post(CHANGE_MANAGER, {\n        activity_id: this.activity_id,\n        new_manager_id: newManagerId,\n        old_manager_id: this.userId,\n      });\n    },\n    terminateActivity() {\n      axios.post(TERMINATE_ACTIVITY, { activity_id: this.activity_id });\n    },\n  },\n  mounted() {\n    this.getActivityInfo();\n    this.getUserRole();\n  },\n  created() {\n    // get the route parameter 'id' from router\n    this.activity_id = this.$route.params.activity_id;\n    this.user_id.push(this.$route.params.user_id);\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}